// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    
    static Array bitArray;

    /** Initializes the library. */
    function void init() {
        var int i, bit;
        let bitArray = Array.new(16);
        let i = 0;
        let bit = 1;
        while(i < 16){
            let bitArray[i] = bit;
            let bit = bit+bit;
            let i=i+1;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if(x < 0){
            return -x;
        }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {

        var int sum, sX, i, m;
        let sum = 0;
        let i = 0;
        let sX = x;
        let m = bitArray[i];

        //bitArray[i] = 1, 2, 4, 8 ...
        while(i < 16){
            if(~(m&y = 0)){
                let sum = sum+sX;
            }
            let sX = sX+sX;
            let i=i+1;
            let m = bitArray[i];
        }

        return sum;
        
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */

    function int divide(int x, int y) {
    	var int q, y2, result;
        var int nx, ny;

        let nx = x < 0;
        let ny = y < 0;
        let x = Math.abs(x);
        let y = Math.abs(y);

    	if(y>x){
    		return 0;
    	}

    	let y2 = y+y;
    	let q = Math.divide(x, y2);
    	if((x-(q*y2))<y){
    		let result = q+q;
    	} else {
            let result = q+q+1;
        }

        if(nx = ny){
            return result;
        }

        return -result;
    	
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
    	var int n, y, temp, temp2;
    	let y = 0;
    	let n = 7; //16/2 - 1

    	while(~(n<0)){
    		let temp = y+bitArray[n];
            let temp2 = temp*temp;
    		if(~(temp2>x)&(temp2>0)){
    			let y = temp;
    		}
    		let n=n-1;
    	}
    	return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if(a>b){
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if(a<b){
            return a;
        } 
        return b;
    }

    function int getBit16(int i){
        //return 2^i
        return bitArray[i];
    }
}
