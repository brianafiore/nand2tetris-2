// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array str;
    field int length;
    field int mLength;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if(maxLength = 0){
            let maxLength = 1;
        }
        let str = Array.new(maxLength);
        let length = 0;
        let mLength = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do str.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if(length < mLength){
            let str[length] = c;
            let length = length + 1;
        }

        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let str[length] = 0;
        let length = length - 1;

        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, value;
        var char c;
        var boolean negative;

        let i = 0;
        let value = 0;

        if(charAt(0) = 45){
            let negative = true;
            let i = 1;
        }

        while(i<length){
            let c = charAt(i);

            //number range 48 - 57
            if((c>47) & (c<58)){
                let value = (value*10)+(c-48);
            } else {
                let i = length; //force loop break
            }
            let i = i+1;
        }

        if(negative){
            let value = -value;
        }
        return value;

    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        
        while(length>0){
            //reset string
            do eraseLastChar();
        }

        do intToStr(val);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }

    method void intToStr(int val){
        var int digit, j;

        if(val<0){
            do appendChar(45);//-
            let val = Math.abs(val);
        }

        let j = val/10;
        let digit = val-(j*10); //mod10
        
        if(~(j=0)){
            //j > 10
            do intToStr(j);
        }

        do appendChar(digit+48);
        
        return;
    }
}
