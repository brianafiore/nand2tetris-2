// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    //instruction[15] == @address -> load A register with 15bit value
    //instruction[13..14] == used only when instruction[0] == 1 
    //instruction[12] == load A or inM value into the ALU
    //instruction[11] == ALU zx bit
    //instruction[10] == ALU nx bit
    //instruction[9] == ALU zy bit
    //instruction[8] == ALU ny bit
    //instruction[7] == ALU f bit
    //instruction[6] == ALU no bit
    //instruction[5] == load A register with outALU
    //instruction[4] == load D register with outALU
    //instruction[3] == write to memory[A]
    //instruction[2] == j1 logic (out < 0)
    //instruction[1] == j2 logic (out = 0)
    //instruction[0] == j3 logic (out > 0)

    //load A Register with address or outALU
    Not(in=instruction[15], out=loadAddress);
    Mux16(a=outALU, b=instruction, sel=loadAddress, out=addressOrResult);
    Or(a=loadAddress, b=instruction[5], out=loadA); 
    ARegister(in=addressOrResult, load=loadA, out=outA);

    //choose A or M to load into the ALU
    Mux16(a=outA, b=inM, sel=instruction[12], out=outAorM);
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=outALU, load=loadD, out=outD);

    //perform ALU operations
    ALU(x=outD, y=outAorM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outALU, zr=resultIsZero, ng=resultIsNegative);

    //Program counter logic
    And(a=resultIsNegative, b=instruction[2], out=JLT); //jump if < 0
    And(a=resultIsZero, b=instruction[1], out=JEQ); //jump if = 0
    Not(in=resultIsNegative, out=resultNotNegative);
    And(a=resultNotNegative, b=instruction[0], out=JGT); //jump if > 0
    Or(a=JLT, b=JEQ, out=JLE); //jump if <= 0
    Not(in=resultIsZero, out=resultNotZero);
    And(a=resultNotZero, b=JGT, out=JNE);
    Or(a=JLE, b=JNE, out=JMP);
    And(a=instruction[15], b=JMP, out=loadPC);
    Not(in=loadPC, out=increment);
    PC(in=outA, load=loadPC, inc=increment, reset=reset, out[0..14]=pc);

    //Write to memory
    And16(a=outA, b=outA, out[0..14]=addressM); //Buffer 15bits of A to addressM
    And16(a=outALU, b=outALU, out=outM); //buffer ALU output to outM
    And(a=instruction[15], b=instruction[3], out=writeM); //buffer 4th bit of instruction to writeM

}